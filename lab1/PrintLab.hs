{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintLab.
--   Generated by the BNF converter.

module PrintLab where

import AbsLab
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Id where
  prt _ (Id i) = doc (showString i)
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Program where
  prt i e = case e of
    PDefs defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print [Def] where
  prt = prtList

instance Print Def where
  prt i e = case e of
    DUsing qconsts -> prPrec i 0 (concatD [doc (showString "using"), prt 0 qconsts, doc (showString ";")])
    DTypeDefId type_ id -> prPrec i 0 (concatD [doc (showString "typedef"), prt 0 type_, prt 0 id, doc (showString ";")])
    DAssignment type_ asss -> prPrec i 0 (concatD [prt 0 type_, prt 0 asss, doc (showString ";")])
    DFun type_ id args stms -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    DFunDeclare type_ id args -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ass where
  prt i e = case e of
    DAssId id -> prPrec i 0 (concatD [prt 0 id])
    DAssIdEqId id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])
    DAssRefIdEqExp id1 id2 -> prPrec i 0 (concatD [doc (showString "&"), prt 0 id1, doc (showString "="), prt 0 id2])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Arg] where
  prt = prtList

instance Print [Ass] where
  prt = prtList

instance Print [Stm] where
  prt = prtList

instance Print Arg where
  prt i e = case e of
    ADecl type_ -> prPrec i 0 (concatD [prt 0 type_])
    ADeclId type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
    ADeclIdAss type_ id exp -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "="), prt 0 exp])
    ADeclRefId type_ id -> prPrec i 0 (concatD [prt 0 type_, doc (showString "&"), prt 0 id])
    ADeclRef type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString "&")])
    ADeclConstRefId type_ id -> prPrec i 0 (concatD [doc (showString "const"), prt 0 type_, doc (showString "&"), prt 0 id])
    ADeclConstRef type_ -> prPrec i 0 (concatD [doc (showString "const"), prt 0 type_, doc (showString "&")])
    ADeclConstTypeId type_ id -> prPrec i 0 (concatD [doc (showString "const"), prt 0 type_, prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Stm where
  prt i e = case e of
    SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    SConstRefDecl type_ id -> prPrec i 0 (concatD [doc (showString "const"), prt 0 type_, doc (showString "&"), prt 0 id, doc (showString ";")])
    SConstDeclsAss type_ ids exp -> prPrec i 0 (concatD [doc (showString "const"), prt 0 type_, prt 0 ids, doc (showString "="), prt 0 exp, doc (showString ";")])
    SConstRefDeclAss type_ id exp -> prPrec i 0 (concatD [doc (showString "const"), prt 0 type_, doc (showString "&"), prt 0 id, doc (showString "="), prt 0 exp, doc (showString ";")])
    SConstDecls type_ ids -> prPrec i 0 (concatD [doc (showString "const"), prt 0 type_, prt 0 ids, doc (showString ";")])
    SInit type_ recasss -> prPrec i 0 (concatD [prt 0 type_, prt 0 recasss, doc (showString ";")])
    SReturn exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    SWhileStm while stm -> prPrec i 0 (concatD [prt 0 while, prt 0 stm])
    SWhileDumb while -> prPrec i 0 (concatD [prt 0 while, doc (showString ";")])
    SDo stm while -> prPrec i 0 (concatD [doc (showString "do"), prt 0 stm, prt 0 while, doc (showString ";")])
    SBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])
    SFor type_ id exp1 exp2 exp3 stm -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 type_, prt 0 id, doc (showString "="), prt 0 exp1, doc (showString ";"), prt 0 exp2, doc (showString ";"), prt 0 exp3, doc (showString ")"), prt 0 stm])
    SForDum type_ id exp1 exp2 stm -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 type_, prt 0 id, doc (showString ";"), prt 0 exp1, doc (showString ";"), prt 0 exp2, doc (showString ")"), prt 0 stm])
    SForDum2 type_ id exp1 exp2 exp3 stm -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), doc (showString "const"), prt 0 type_, prt 0 id, doc (showString "="), prt 0 exp1, doc (showString ";"), prt 0 exp2, doc (showString ";"), prt 0 exp3, doc (showString ")"), prt 0 stm])
    SIfElse exp stm else_ -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm, prt 0 else_])
    STypeDef type_ id -> prPrec i 0 (concatD [doc (showString "typedef"), prt 0 type_, prt 0 id, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print RecAss where
  prt i e = case e of
    SRecursiveAss id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])
    SRecursiveDec id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print While where
  prt i e = case e of
    SWhile exp -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")")])

instance Print Else where
  prt i e = case e of
    NoSElse -> prPrec i 0 (concatD [])
    YesSElse stm -> prPrec i 0 (concatD [doc (showString "else"), prt 0 stm])

instance Print [Id] where
  prt = prtList

instance Print [RecAss] where
  prt = prtList

instance Print QConsts where
  prt i e = case e of
    QConsts qconsts -> prPrec i 0 (concatD [prt 0 qconsts])

instance Print QConst where
  prt i e = case e of
    QConst id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "::"), prt 0 xs]

instance Print [QConst] where
  prt = prtList

instance Print Exp where
  prt i e = case e of
    EChar c -> prPrec i 15 (concatD [prt 0 c])
    EInt n -> prPrec i 15 (concatD [prt 0 n])
    EDouble d -> prPrec i 15 (concatD [prt 0 d])
    EString lstrings -> prPrec i 15 (concatD [prt 0 lstrings])
    EConst qconsts -> prPrec i 15 (concatD [prt 0 qconsts])
    ETrue -> prPrec i 15 (concatD [doc (showString "true")])
    EFalse -> prPrec i 15 (concatD [doc (showString "false")])
    EIndex exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "["), prt 0 exp2, doc (showString "]")])
    EApp exp exps -> prPrec i 14 (concatD [prt 14 exp, doc (showString "("), prt 0 exps, doc (showString ")")])
    EPIncr exp -> prPrec i 14 (concatD [prt 14 exp, doc (showString "++")])
    EPDecr exp -> prPrec i 14 (concatD [prt 14 exp, doc (showString "--")])
    EDot exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "."), prt 15 exp2])
    EArrow exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "->"), prt 15 exp2])
    EIncr exp -> prPrec i 13 (concatD [doc (showString "++"), prt 13 exp])
    EDecr exp -> prPrec i 13 (concatD [doc (showString "--"), prt 13 exp])
    EDeref exp -> prPrec i 13 (concatD [doc (showString "*"), prt 13 exp])
    ENeg exp -> prPrec i 13 (concatD [doc (showString "!"), prt 13 exp])
    EMod exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "%"), prt 13 exp2])
    ETimes exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    EDiv exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "/"), prt 13 exp2])
    EPlus exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "+"), prt 12 exp2])
    EMinus exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    ELts exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<<"), prt 11 exp2])
    EGts exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">>"), prt 11 exp2])
    ELt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<"), prt 10 exp2])
    EGt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">"), prt 10 exp2])
    ELtEq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<="), prt 10 exp2])
    EGtWq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">="), prt 10 exp2])
    EEq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "=="), prt 9 exp2])
    ENEq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "!="), prt 9 exp2])
    EAnd exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "&&"), prt 5 exp2])
    EOr exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "||"), prt 4 exp2])
    EAss exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "="), prt 2 exp2])
    EAssNeg exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "-="), prt 2 exp2])
    EAssPos exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "+="), prt 2 exp2])
    EIf exp1 exp2 exp3 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "?"), prt 2 exp2, doc (showString ":"), prt 2 exp3])
    EThrow exp -> prPrec i 1 (concatD [doc (showString "throw"), prt 1 exp])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Exp] where
  prt = prtList

instance Print LStrings where
  prt i e = case e of
    LStrings strs -> prPrec i 0 (concatD [prt 0 strs])

instance Print [String] where
  prt = prtList

instance Print Type where
  prt i e = case e of
    Tbool -> prPrec i 0 (concatD [doc (showString "bool")])
    Tdouble -> prPrec i 0 (concatD [doc (showString "double")])
    Tint -> prPrec i 0 (concatD [doc (showString "int")])
    Tvoid -> prPrec i 0 (concatD [doc (showString "void")])
    TConst qconsts -> prPrec i 0 (concatD [prt 0 qconsts])

