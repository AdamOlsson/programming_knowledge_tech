-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParLab where
import AbsLab
import LexLab
import ErrM

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pAss Ass
%name pListArg ListArg
%name pListAss ListAss
%name pListStm ListStm
%name pArg Arg
%name pStm Stm
%name pRecAss RecAss
%name pWhile While
%name pElse Else
%name pListId ListId
%name pListRecAss ListRecAss
%name pQConsts QConsts
%name pQConst QConst
%name pListQConst ListQConst
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pListExp ListExp
%name pLStrings LStrings
%name pListString ListString
%name pType Type
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '->' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  '::' { PT _ (TS _ 20) }
  ';' { PT _ (TS _ 21) }
  '<' { PT _ (TS _ 22) }
  '<<' { PT _ (TS _ 23) }
  '<=' { PT _ (TS _ 24) }
  '=' { PT _ (TS _ 25) }
  '==' { PT _ (TS _ 26) }
  '>' { PT _ (TS _ 27) }
  '>=' { PT _ (TS _ 28) }
  '>>' { PT _ (TS _ 29) }
  '?' { PT _ (TS _ 30) }
  '[' { PT _ (TS _ 31) }
  ']' { PT _ (TS _ 32) }
  'bool' { PT _ (TS _ 33) }
  'const' { PT _ (TS _ 34) }
  'do' { PT _ (TS _ 35) }
  'double' { PT _ (TS _ 36) }
  'else' { PT _ (TS _ 37) }
  'false' { PT _ (TS _ 38) }
  'for' { PT _ (TS _ 39) }
  'if' { PT _ (TS _ 40) }
  'int' { PT _ (TS _ 41) }
  'return' { PT _ (TS _ 42) }
  'throw' { PT _ (TS _ 43) }
  'true' { PT _ (TS _ 44) }
  'typedef' { PT _ (TS _ 45) }
  'using' { PT _ (TS _ 46) }
  'void' { PT _ (TS _ 47) }
  'while' { PT _ (TS _ 48) }
  '{' { PT _ (TS _ 49) }
  '||' { PT _ (TS _ 50) }
  '}' { PT _ (TS _ 51) }

L_charac { PT _ (TC $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }
L_Id { PT _ (T_Id $$) }


%%

Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
String  :: { String }  : L_quoted {  $1 }
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { AbsLab.PDefs (reverse $1) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Def :: { Def }
Def : 'using' QConsts ';' { AbsLab.DUsing $2 }
    | 'typedef' Type Id ';' { AbsLab.DTypeDefId $2 $3 }
    | Type ListAss ';' { AbsLab.DAssignment $1 $2 }
    | Type Id '(' ListArg ')' '{' ListStm '}' { AbsLab.DFun $1 $2 $4 (reverse $7) }
    | Type Id '(' ListArg ')' ';' { AbsLab.DFunDeclare $1 $2 $4 }
Ass :: { Ass }
Ass : Id { AbsLab.DAssId $1 }
    | Id '=' Exp { AbsLab.DAssIdEqId $1 $3 }
    | '&' Id '=' Id { AbsLab.DAssRefIdEqExp $2 $4 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
ListAss :: { [Ass] }
ListAss : Ass { (:[]) $1 } | Ass ',' ListAss { (:) $1 $3 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Arg :: { Arg }
Arg : Type { AbsLab.ADecl $1 }
    | Type Id { AbsLab.ADeclId $1 $2 }
    | Type Id '=' Exp { AbsLab.ADeclIdAss $1 $2 $4 }
    | Type '&' Id { AbsLab.ADeclRefId $1 $3 }
    | Type '&' { AbsLab.ADeclRef $1 }
    | 'const' Type '&' Id { AbsLab.ADeclConstRefId $2 $4 }
    | 'const' Type '&' { AbsLab.ADeclConstRef $2 }
    | 'const' Type Id { AbsLab.ADeclConstTypeId $2 $3 }
Stm :: { Stm }
Stm : Exp ';' { AbsLab.SExp $1 }
    | 'const' Type '&' Id ';' { AbsLab.SConstRefDecl $2 $4 }
    | 'const' Type ListId '=' Exp ';' { AbsLab.SConstDeclsAss $2 $3 $5 }
    | 'const' Type '&' Id '=' Exp ';' { AbsLab.SConstRefDeclAss $2 $4 $6 }
    | 'const' Type ListId ';' { AbsLab.SConstDecls $2 $3 }
    | Type ListRecAss ';' { AbsLab.SInit $1 $2 }
    | 'return' Exp ';' { AbsLab.SReturn $2 }
    | While Stm { AbsLab.SWhileStm $1 $2 }
    | While ';' { AbsLab.SWhileDumb $1 }
    | 'do' Stm While ';' { AbsLab.SDo $2 $3 }
    | '{' ListStm '}' { AbsLab.SBlock (reverse $2) }
    | 'for' '(' Type Id '=' Exp ';' Exp ';' Exp ')' Stm { AbsLab.SFor $3 $4 $6 $8 $10 $12 }
    | 'for' '(' Type Id ';' Exp ';' Exp ')' Stm { AbsLab.SForDum $3 $4 $6 $8 $10 }
    | 'for' '(' 'const' Type Id '=' Exp ';' Exp ';' Exp ')' Stm { AbsLab.SForDum2 $4 $5 $7 $9 $11 $13 }
    | 'if' '(' Exp ')' Stm Else { AbsLab.SIfElse $3 $5 $6 }
    | 'typedef' Type Id ';' { AbsLab.STypeDef $2 $3 }
RecAss :: { RecAss }
RecAss : Id '=' Exp { AbsLab.SRecursiveAss $1 $3 }
       | Id { AbsLab.SRecursiveDec $1 }
While :: { While }
While : 'while' '(' Exp ')' { AbsLab.SWhile $3 }
Else :: { Else }
Else : {- empty -} { AbsLab.NoSElse }
     | 'else' Stm { AbsLab.YesSElse $2 }
ListId :: { [Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
ListRecAss :: { [RecAss] }
ListRecAss : RecAss { (:[]) $1 }
           | RecAss ',' ListRecAss { (:) $1 $3 }
QConsts :: { QConsts }
QConsts : ListQConst { AbsLab.QConsts $1 }
QConst :: { QConst }
QConst : Id { AbsLab.QConst $1 }
ListQConst :: { [QConst] }
ListQConst : QConst { (:[]) $1 }
           | QConst '::' ListQConst { (:) $1 $3 }
Exp15 :: { Exp }
Exp15 : Char { AbsLab.EChar $1 }
      | Integer { AbsLab.EInt $1 }
      | Double { AbsLab.EDouble $1 }
      | LStrings { AbsLab.EString $1 }
      | QConsts { AbsLab.EConst $1 }
      | 'true' { AbsLab.ETrue }
      | 'false' { AbsLab.EFalse }
      | Id { AbsLab.EId $1 }
      | '(' Exp ')' { $2 }
Exp14 :: { Exp }
Exp14 : Exp14 '[' Exp ']' { AbsLab.EIndex $1 $3 }
      | Exp14 '(' ListExp ')' { AbsLab.EApp $1 $3 }
      | Exp14 '++' { AbsLab.EPIncr $1 }
      | Exp14 '--' { AbsLab.EPDecr $1 }
      | Exp14 '.' Exp15 { AbsLab.EDot $1 $3 }
      | Exp14 '->' Exp15 { AbsLab.EArrow $1 $3 }
      | Exp15 { $1 }
Exp13 :: { Exp }
Exp13 : '++' Exp13 { AbsLab.EIncr $2 }
      | '--' Exp13 { AbsLab.EDecr $2 }
      | '*' Exp13 { AbsLab.EDeref $2 }
      | '!' Exp13 { AbsLab.ENeg $2 }
      | Exp14 { $1 }
Exp12 :: { Exp }
Exp12 : Exp12 '%' Exp13 { AbsLab.EMod $1 $3 }
      | Exp12 '*' Exp13 { AbsLab.ETimes $1 $3 }
      | Exp12 '/' Exp13 { AbsLab.EDiv $1 $3 }
      | Exp13 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '+' Exp12 { AbsLab.EPlus $1 $3 }
      | Exp11 '-' Exp12 { AbsLab.EMinus $1 $3 }
      | Exp12 { $1 }
Exp10 :: { Exp }
Exp10 : Exp10 '<<' Exp11 { AbsLab.ELts $1 $3 }
      | Exp10 '>>' Exp11 { AbsLab.EGts $1 $3 }
      | Exp11 { $1 }
Exp9 :: { Exp }
Exp9 : Exp9 '<' Exp10 { AbsLab.ELt $1 $3 }
     | Exp9 '>' Exp10 { AbsLab.EGt $1 $3 }
     | Exp9 '<=' Exp10 { AbsLab.ELtEq $1 $3 }
     | Exp9 '>=' Exp10 { AbsLab.EGtWq $1 $3 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '==' Exp9 { AbsLab.EEq $1 $3 }
     | Exp8 '!=' Exp9 { AbsLab.ENEq $1 $3 }
     | Exp9 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { AbsLab.EAnd $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp4 { AbsLab.EOr $1 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '=' Exp2 { AbsLab.EAss $1 $3 }
     | Exp3 '-=' Exp2 { AbsLab.EAssNeg $1 $3 }
     | Exp3 '+=' Exp2 { AbsLab.EAssPos $1 $3 }
     | Exp3 '?' Exp2 ':' Exp2 { AbsLab.EIf $1 $3 $5 }
     | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : 'throw' Exp1 { AbsLab.EThrow $2 } | Exp2 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
LStrings :: { LStrings }
LStrings : ListString { AbsLab.LStrings $1 }
ListString :: { [String] }
ListString : String { (:[]) $1 } | String ListString { (:) $1 $2 }
Type :: { Type }
Type : 'bool' { AbsLab.Tbool }
     | 'double' { AbsLab.Tdouble }
     | 'int' { AbsLab.Tint }
     | 'void' { AbsLab.Tvoid }
     | QConsts { AbsLab.TConst $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

